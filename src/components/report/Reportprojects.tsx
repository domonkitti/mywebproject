import { Table } from "flowbite-react";
import { useEffect, useState } from "react";
import { getReviewedProjects } from "../../apis/UserProjectApi";
import { ProjectTable } from "../../interfaces/MainInterface";
import { IoPencil } from "react-icons/io5";
import React from "react";
import EditProjectModal from "../AdminEdit/EditProjectModal";
import { Link } from 'react-router-dom';  // Add this import at the top

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
const formatNumber = (num: number) => num.toLocaleString();

const BudgetTable = () => {
  const [projects, setProjects] = useState<ProjectTable[]>([]);
  const [uniqueYears, setUniqueYears] = useState<number[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedProject, setSelectedProject] = useState<ProjectTable | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchDepartment, setSearchDepartment] = useState("");

  useEffect(() => {
    getReviewedProjects().then((data) => {
      setProjects(data);

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      const years = data.flatMap((project: ProjectTable) => project.budgetPlan.map((bp) => bp.year));
      const uniqueYearsArray = Array.from(new Set<number>(years)).sort((a, b) => a - b);
      setUniqueYears(uniqueYearsArray);
    });
  }, []);

  const handleEditClick = (project: ProjectTable) => {
    setSelectedProject(project);
    setIsModalOpen(true);
  };

  const handleSaveEdit = (updatedProject: ProjectTable) => {
    setProjects((prevProjects) =>
      prevProjects.map((proj) => (proj.projectId === updatedProject.projectId ? updatedProject : proj))
    );
  };

  const filteredProjects = projects.filter(
    (project) => project.projectName.includes(searchQuery) && project.departmentName.includes(searchDepartment)
  );

  return (
    <div className="overflow-x-auto">
      <h1 className="text-2xl font-bold text-center mb-5">‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (Admin)</h1>
      <h2 className="text-xl font-semibold text-center mb-5">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</h2>

      <Table striped>
        <Table.Head className="bg-gray-100 text-gray-700 text-center">
          <Table.HeadCell rowSpan={2} className="text-center border border-gray-400">
            ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ <br /> <span className="text-sm text-gray-500">(‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ / ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)</span>
          </Table.HeadCell>
          <Table.HeadCell rowSpan={2} className="text-center border border-gray-400">
            ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
          </Table.HeadCell>

          {/* üîπ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ uniqueYears ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏µ X" -> "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏µ X" */}
          {uniqueYears.map((year) => (
            <React.Fragment key={`header-${year}`}>
              {/* üîπ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏µ X */}
              <Table.HeadCell colSpan={3} className="text-center border border-gray-400">
                {`‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏µ ${year}`}
              </Table.HeadCell>

              {/* üîπ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏µ X */}
              <Table.HeadCell colSpan={3} className="text-center border border-gray-400">
                {`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢ ${year}`}
              </Table.HeadCell>
              <Table.HeadCell rowSpan={2} className="text-center border border-gray-400">
                ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
              </Table.HeadCell>
              <Table.HeadCell rowSpan={2} className="text-center border border-gray-400">
                ‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á
              </Table.HeadCell>    
            </React.Fragment>
          ))}      
        </Table.Head>
        
        

        {/* üîπ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 - ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ "‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô / ‡∏•‡∏á‡∏ó‡∏∏‡∏ô / ‡∏£‡∏ß‡∏°" */}
        <Table.Head>
          <Table.HeadCell className="border border-gray-400 px-2">
            <input
              type="text"
              className="w-full p-1 text-sm border border-gray-300 rounded"
              placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </Table.HeadCell>
          <Table.HeadCell className="border border-gray-400 px-2">
            <input
              type="text"
              className="w-full p-1 text-sm border border-gray-300 rounded"
              placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô..."
              value={searchDepartment}
              onChange={(e) => setSearchDepartment(e.target.value)}
            />
          </Table.HeadCell>

          {uniqueYears.map((year) => (
            <React.Fragment key={`subheader-${year}`}>
              <Table.HeadCell className="text-center border border-gray-400">‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô</Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400">‡∏•‡∏á‡∏ó‡∏∏‡∏ô</Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400">‡∏£‡∏ß‡∏°</Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400">‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô</Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400">‡∏•‡∏á‡∏ó‡∏∏‡∏ô</Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400">‡∏£‡∏ß‡∏°</Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400"></Table.HeadCell>
              <Table.HeadCell className="text-center border border-gray-400"></Table.HeadCell>

            </React.Fragment>
          ))}
        </Table.Head>

        {/* üîπ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
        <Table.Body className="divide-y border border-gray-400">
          {filteredProjects.map((project) => (
            <Table.Row key={project.projectId} className="border border-gray-400">
              {/* üîπ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ & ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô */}
              <Table.Cell className="text-left border border-gray-400 px-4 font-bold">
                <Link to={`/editreport/${project.projectId}`} className="mr-2 text-blue-600 hover:text-blue-800">
                  <IoPencil size={18} />
                </Link>
                {project.projectName}
                <div className="text-sm text-gray-600">
                  <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ: </span> 
                  <br />
                  <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: </span> 
                </div>
              </Table.Cell>
              <Table.Cell className="text-left border border-gray-400 px-4">{project.departmentName}</Table.Cell>

              {/* üîπ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (uniqueYears) */}
              {uniqueYears.map((year) => {
                const yearData = project.budgetPlan.find((bp) => bp.year === year);

                return yearData ? (
                  <React.Fragment key={`row-${project.projectId}-${year}`}>
                    {/* üîπ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏µ X */}
                    <Table.Cell className="text-center border border-gray-400 px-4">
                      {formatNumber(yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>
                    <Table.Cell className="text-center border border-gray-400 px-4">
                      {formatNumber(yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>
                    <Table.Cell className="text-center border border-gray-400 px-4 font-bold">
                      {formatNumber(
                        yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ +
                        yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ +
                        yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ +
                        yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
                      )}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ + yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>


                    {/* üîπ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏µ X */}
                    <Table.Cell className="text-center border border-gray-400 px-4">
                      {formatNumber(yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>
                    <Table.Cell className="text-center border border-gray-400 px-4">
                      {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>
                    <Table.Cell className="text-center border border-gray-400 px-4 font-bold">
                      {formatNumber(
                        yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ +
                        yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ +
                        yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ +
                        yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
                      )}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ + yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>
                    {/* ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */}
                    <Table.Cell className="text-center border border-gray-400 px-4">
                      {formatNumber(
                        (yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ+yearData.budgetAllocated.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ+yearData.budgetAllocated.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ) -
                        (yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)
                        
                      )}
                      <div className="text-sm text-gray-600">
                        {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ + yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ-yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ-yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ)}<br /> 
                        {formatNumber(yearData.budgetUsage.‡∏•‡∏á‡∏ó‡∏∏‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ + yearData.budgetUsage.‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô.‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)}
                      </div>
                    </Table.Cell>

                  </React.Fragment>
                ) : (
                  <React.Fragment key={`empty-${project.projectId}-${year}`}>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                    <Table.Cell className="border border-gray-400"></Table.Cell>
                  </React.Fragment>
                );
              })}
            </Table.Row>
          ))}
        </Table.Body>
      </Table>

      <EditProjectModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} project={selectedProject} onSave={handleSaveEdit} />
    </div>
  );
};

export default BudgetTable;
